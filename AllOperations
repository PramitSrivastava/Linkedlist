
//Java code below
//Java code below
//Java code below
//java code below
public class LinkedList{
  Node head;
  LinkedList()
  {
    this.head = null;
  }
  void pushAtBegenning(int data)
  {
    Node newnode = new Node(data);
    newnode.next = head;
    head = newnode;
  }
  void pushAtEnd(int data)
  {
     Node newnode = new Node(data);
     if(head == null)
     {
       head = newnode;
       return;
     }
     Node temp = head;
     while(temp.next != null)
     {
       temp = temp.next;
     }
     temp.next = newnode;
  }
  void pushAtSpecific(int data ,int k)
  {
    Node newnode = new Node(data);
    if(head == null)
    {
      head = newnode;
      return;
    }
    Node temp = head;
    while(temp!= null && k>1)
    {
      temp = temp.next;
      k--;
    }
    if (temp == null) {
            System.out.println("Position out of bounds");
            return;
        }
    newnode.next = temp.next;
    temp.next = newnode;
  }
  void pushAfterANode(int data , int target)
  {
    Node newnode = new Node(data);
    if(head == null)
    {
      head = newnode;
      return;
    }
    Node temp = head;
    while(temp != null)
    {
      if(temp.data == target)
      {
        newnode.next = temp.next;
        temp.next = newnode;
        return;
      }
      temp = temp.next;
    }
    System.out.print("Their is no such target in the list");
  }
  void deleteAtBegin()
  {
    if(head == null)
    {
      return;
    }
    head = head.next;
  }
  void deleteAtEnd()
  {
    if(head == null)
    {
      return;
    }
    if (head.next == null) {  
        head = null;
        return;
    }
    Node temp = head;
    Node prev = temp;
    while(temp.next != null)
    {
       prev = temp;
      temp = temp.next;
    }
    prev.next = null;
  }
  void deleteAtSpecific(int k)
  {
    if(head == null)
    {
      return;
    }
    if(k == 0)
    {
      head = head.next;
      return;
    }
    Node temp = head;
    Node prev = temp;
    while(temp.next != null && k > 0)
    {
      prev = temp;
      temp = temp.next;
      k--;
    }
    prev.next = temp.next;
    
  }
  void deleteASpecificNode(int target)
  {
    if(head == null)
    {
      return;
    }
    if (head.data == target) {
        head = head.next; // Delete the head node if it contains the target
        return;
    }
    Node temp = head;
    Node prev = temp;
    while(temp !=null)
    {
      if(temp.data == target)
      {
        prev.next = temp.next;
        return;
      }
      prev = temp;
      temp = temp.next;
      
    }
  }
  void printList()
  {
    Node temp = head;
    while(temp!= null)
    {
      System.out.print(temp.data + " -> ");
      temp = temp.next;
    }
    System.out.println("null");
  }
  public static void main(String args[])
  {
    LinkedList ll = new LinkedList();
    ll.pushAtBegenning(1);
    ll.pushAtBegenning(3);
    ll.pushAtEnd(2);
    ll.pushAtEnd(4);
    ll.pushAtSpecific(7,2);
    ll.pushAtSpecific(8,2);
    ll.pushAtSpecific(6,2);
    ll.pushAtSpecific(6,3);
    ll.pushAtSpecific(6,2);
     ll.pushAtSpecific(9,4);
     ll.pushAfterANode(5,6);
      ll.pushAfterANode(7,5);
      ll.deleteAtBegin();
      ll.deleteAtBegin();
      ll.deleteAtBegin();
      ll.deleteAtEnd();
      ll.deleteAtEnd();
      ll.deleteAtEnd();
      ll.deleteAtSpecific(2);
      ll.deleteAtSpecific(1);
      ll.deleteAtSpecific(2);
      ll.pushAtBegenning(1);
    ll.pushAtBegenning(3);
    ll.pushAtEnd(2);
    ll.pushAtEnd(4);
    ll.pushAtSpecific(7,2);
    ll.pushAtSpecific(8,2);
    ll.deleteAtSpecific(2);
    ll.deleteAtSpecific(2);
    ll.deleteAtSpecific(0);
    ll.deleteAtSpecific(2);
    ll.deleteAtSpecific(2);
    ll.deleteASpecificNode(5);
    ll.deleteASpecificNode(4);
    ll.deleteASpecificNode(1);
    ll.printList();
  }
  
}
class Node {
  int data;
  Node next;
  Node(int data)
  {
    this.data = data;
    this.next = null;
  }
}
