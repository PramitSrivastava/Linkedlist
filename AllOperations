class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def pushAtBeginning(self, data):
        new_Node = Node(data)
        if self.head is None:
            new_Node.next = self.head
            self.head = new_Node
        else:
            new_Node.next = self.head
            self.head = new_Node

    def pushAtEnding(self, data):
        new_Node = Node(data)
        if not self.head:
            self.head = new_Node
            return

        temp = self.head
        while temp.next:
            temp = temp.next

        temp.next = new_Node

    def pushAtGivenPosition(self, data, target_data):
        new_Node = Node(data)
        temp = self.head

        while temp:
            if temp.data == target_data:
                new_Node.next = temp.next
                temp.next = new_Node
                break
            temp = temp.next

    def deleteAtBeginning(self):
        if not self.head:
            print("List is empty")
            return
        if not self.head.next:
            self.head = None
        else:
            self.head = self.head.next

    def deleteAtEnd(self):
        if not self.head:
            print("List is empty")
            return
        if not self.head.next:
            self.head = None
        else:
            temp = self.head
            while temp.next.next:
                temp = temp.next
            temp.next = None

    def deleteAtSpecific(self, data_target):
        if not self.head:
            print('List is empty')
            return

        if self.head.data == data_target:
            self.head = self.head.next
            return

        temp = self.head
        while temp.next and temp.next.data != data_target:
            temp = temp.next

        if not temp.next:
            print("Number does not exist")
            return

        temp.next = temp.next.next

    def printList(self):
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next


llist = LinkedList()
llist.pushAtEnding(3)
llist.pushAtEnding(4)
llist.pushAtEnding(5)
llist.pushAtGivenPosition(6, 3)
llist.pushAtBeginning(1)
llist.pushAtBeginning(0)
llist.deleteAtBeginning()
llist.deleteAtEnd()
llist.deleteAtSpecific(1)
llist.printList()
//java
class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedList {
    Node head;

    LinkedList() {
        this.head = null;
    }

    // Add node at the beginning
    void pushAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Add node at the end
    void pushAtEnding(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    // Add node after a given target data
    void pushAtGivenPosition(int data, int targetData) {
        Node newNode = new Node(data);
        Node temp = head;

        while (temp != null) {
            if (temp.data == targetData) {
                newNode.next = temp.next;
                temp.next = newNode;
                break;
            }
            temp = temp.next;
        }
    }

    // Delete node at the beginning
    void deleteAtBeginning() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        head = head.next;
    }

    // Delete node at the end
    void deleteAtEnd() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        if (head.next == null) {
            head = null;
            return;
        }

        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        temp.next = null;
    }

    // Delete specific node
    void deleteAtSpecific(int targetData) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        if (head.data == targetData) {
            head = head.next;
            return;
        }

        Node temp = head;
        while (temp.next != null && temp.next.data != targetData) {
            temp = temp.next;
        }

        if (temp.next == null) {
            System.out.println("Number does not exist");
            return;
        }

        temp.next = temp.next.next;
    }

    // Print the linked list
    void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        LinkedList llist = new LinkedList();
        llist.pushAtEnding(3);
        llist.pushAtEnding(4);
        llist.pushAtEnding(5);
        llist.pushAtGivenPosition(6, 3);
        llist.pushAtBeginning(1);
        llist.pushAtBeginning(0);
        llist.deleteAtBeginning();
        llist.deleteAtEnd();
        llist.deleteAtSpecific(1);
        llist.printList();
    }
}
